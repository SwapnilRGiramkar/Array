*Binary Search--->
1. Definition
Binary Search is an efficient searching algorithm used to find the position of a target element in a sorted array (or list).
It works by repeatedly dividing the search range in half, comparing the middle element to the target.

2. Requirements
The array must be sorted (in ascending or descending order).

You should be able to access elements in constant time (e.g., arrays, not linked lists).

3. How It Works (Step-by-Step)
Set low = starting index, high = ending index.

Find the middle index:

mid=(low+high)/2

(in programming: mid = low + (high - low) / 2 to avoid overflow).

Compare arr[mid] with the target:

If arr[mid] == target → Target found.
If arr[mid] < target → Search the right half (low = mid + 1).
If arr[mid] > target → Search the left half (high = mid - 1).
Repeat until low > high.

4. Example
Given:

arr = [2, 5, 8, 12, 16, 23, 38, 56]
target = 16
Steps:

low = 0, high = 7
mid = 3 → arr[3] = 12 (less than 16) → search right half.

low = 4, high = 7
mid = 5 → arr[5] = 23 (greater than 16) → search left half.

low = 4, high = 4
mid = 4 → arr[4] = 16 → Found!

5. Time Complexity
Best Case:
O(1)
O(1) → Element found in the first comparison.

Worst Case :
O(log2n)
Space Complexity:
O(1) for iterative,O(logn) for recursive (stack calls).

6. Advantages
Much faster than linear search for large sorted datasets.
Low memory usage in iterative form.

7. Disadvantages
Only works on sorted data.
Not suitable for datasets where insertions/deletions happen frequently (unless re-sorted).
